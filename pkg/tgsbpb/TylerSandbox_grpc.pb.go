// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: TylerSandbox.proto

package tgsbpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TylerSandboxService_UnaryCallString_FullMethodName           = "/tgsbpb.TylerSandboxService/UnaryCallString"
	TylerSandboxService_UnaryCallInt_FullMethodName              = "/tgsbpb.TylerSandboxService/UnaryCallInt"
	TylerSandboxService_ServerStreamString_FullMethodName        = "/tgsbpb.TylerSandboxService/ServerStreamString"
	TylerSandboxService_ServerStreamInt_FullMethodName           = "/tgsbpb.TylerSandboxService/ServerStreamInt"
	TylerSandboxService_ClientStreamString_FullMethodName        = "/tgsbpb.TylerSandboxService/ClientStreamString"
	TylerSandboxService_ClientStreamInt_FullMethodName           = "/tgsbpb.TylerSandboxService/ClientStreamInt"
	TylerSandboxService_BidirectionalStreamString_FullMethodName = "/tgsbpb.TylerSandboxService/BidirectionalStreamString"
)

// TylerSandboxServiceClient is the client API for TylerSandboxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TylerSandboxServiceClient interface {
	UnaryCallString(ctx context.Context, in *UnaryCallStringRequest, opts ...grpc.CallOption) (*UnaryCallStringResponse, error)
	UnaryCallInt(ctx context.Context, in *UnaryCallIntRequest, opts ...grpc.CallOption) (*UnaryCallIntResponse, error)
	ServerStreamString(ctx context.Context, in *ServerStreamStringRequest, opts ...grpc.CallOption) (TylerSandboxService_ServerStreamStringClient, error)
	ServerStreamInt(ctx context.Context, in *ServerStreamIntRequest, opts ...grpc.CallOption) (TylerSandboxService_ServerStreamIntClient, error)
	ClientStreamString(ctx context.Context, opts ...grpc.CallOption) (TylerSandboxService_ClientStreamStringClient, error)
	ClientStreamInt(ctx context.Context, opts ...grpc.CallOption) (TylerSandboxService_ClientStreamIntClient, error)
	BidirectionalStreamString(ctx context.Context, opts ...grpc.CallOption) (TylerSandboxService_BidirectionalStreamStringClient, error)
}

type tylerSandboxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTylerSandboxServiceClient(cc grpc.ClientConnInterface) TylerSandboxServiceClient {
	return &tylerSandboxServiceClient{cc}
}

func (c *tylerSandboxServiceClient) UnaryCallString(ctx context.Context, in *UnaryCallStringRequest, opts ...grpc.CallOption) (*UnaryCallStringResponse, error) {
	out := new(UnaryCallStringResponse)
	err := c.cc.Invoke(ctx, TylerSandboxService_UnaryCallString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tylerSandboxServiceClient) UnaryCallInt(ctx context.Context, in *UnaryCallIntRequest, opts ...grpc.CallOption) (*UnaryCallIntResponse, error) {
	out := new(UnaryCallIntResponse)
	err := c.cc.Invoke(ctx, TylerSandboxService_UnaryCallInt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tylerSandboxServiceClient) ServerStreamString(ctx context.Context, in *ServerStreamStringRequest, opts ...grpc.CallOption) (TylerSandboxService_ServerStreamStringClient, error) {
	stream, err := c.cc.NewStream(ctx, &TylerSandboxService_ServiceDesc.Streams[0], TylerSandboxService_ServerStreamString_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tylerSandboxServiceServerStreamStringClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TylerSandboxService_ServerStreamStringClient interface {
	Recv() (*ServerStreamStringResponse, error)
	grpc.ClientStream
}

type tylerSandboxServiceServerStreamStringClient struct {
	grpc.ClientStream
}

func (x *tylerSandboxServiceServerStreamStringClient) Recv() (*ServerStreamStringResponse, error) {
	m := new(ServerStreamStringResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tylerSandboxServiceClient) ServerStreamInt(ctx context.Context, in *ServerStreamIntRequest, opts ...grpc.CallOption) (TylerSandboxService_ServerStreamIntClient, error) {
	stream, err := c.cc.NewStream(ctx, &TylerSandboxService_ServiceDesc.Streams[1], TylerSandboxService_ServerStreamInt_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tylerSandboxServiceServerStreamIntClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TylerSandboxService_ServerStreamIntClient interface {
	Recv() (*ServerStreamIntResponse, error)
	grpc.ClientStream
}

type tylerSandboxServiceServerStreamIntClient struct {
	grpc.ClientStream
}

func (x *tylerSandboxServiceServerStreamIntClient) Recv() (*ServerStreamIntResponse, error) {
	m := new(ServerStreamIntResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tylerSandboxServiceClient) ClientStreamString(ctx context.Context, opts ...grpc.CallOption) (TylerSandboxService_ClientStreamStringClient, error) {
	stream, err := c.cc.NewStream(ctx, &TylerSandboxService_ServiceDesc.Streams[2], TylerSandboxService_ClientStreamString_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tylerSandboxServiceClientStreamStringClient{stream}
	return x, nil
}

type TylerSandboxService_ClientStreamStringClient interface {
	Send(*ClientStreamStringRequest) error
	CloseAndRecv() (*ClientStreamStringResponse, error)
	grpc.ClientStream
}

type tylerSandboxServiceClientStreamStringClient struct {
	grpc.ClientStream
}

func (x *tylerSandboxServiceClientStreamStringClient) Send(m *ClientStreamStringRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tylerSandboxServiceClientStreamStringClient) CloseAndRecv() (*ClientStreamStringResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamStringResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tylerSandboxServiceClient) ClientStreamInt(ctx context.Context, opts ...grpc.CallOption) (TylerSandboxService_ClientStreamIntClient, error) {
	stream, err := c.cc.NewStream(ctx, &TylerSandboxService_ServiceDesc.Streams[3], TylerSandboxService_ClientStreamInt_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tylerSandboxServiceClientStreamIntClient{stream}
	return x, nil
}

type TylerSandboxService_ClientStreamIntClient interface {
	Send(*ClientStreamIntRequest) error
	CloseAndRecv() (*ClientStreamIntResponse, error)
	grpc.ClientStream
}

type tylerSandboxServiceClientStreamIntClient struct {
	grpc.ClientStream
}

func (x *tylerSandboxServiceClientStreamIntClient) Send(m *ClientStreamIntRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tylerSandboxServiceClientStreamIntClient) CloseAndRecv() (*ClientStreamIntResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(ClientStreamIntResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tylerSandboxServiceClient) BidirectionalStreamString(ctx context.Context, opts ...grpc.CallOption) (TylerSandboxService_BidirectionalStreamStringClient, error) {
	stream, err := c.cc.NewStream(ctx, &TylerSandboxService_ServiceDesc.Streams[4], TylerSandboxService_BidirectionalStreamString_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &tylerSandboxServiceBidirectionalStreamStringClient{stream}
	return x, nil
}

type TylerSandboxService_BidirectionalStreamStringClient interface {
	Send(*BidirectionalStreamStringRequest) error
	Recv() (*BidirectionalStreamStringResponse, error)
	grpc.ClientStream
}

type tylerSandboxServiceBidirectionalStreamStringClient struct {
	grpc.ClientStream
}

func (x *tylerSandboxServiceBidirectionalStreamStringClient) Send(m *BidirectionalStreamStringRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tylerSandboxServiceBidirectionalStreamStringClient) Recv() (*BidirectionalStreamStringResponse, error) {
	m := new(BidirectionalStreamStringResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TylerSandboxServiceServer is the server API for TylerSandboxService service.
// All implementations must embed UnimplementedTylerSandboxServiceServer
// for forward compatibility
type TylerSandboxServiceServer interface {
	UnaryCallString(context.Context, *UnaryCallStringRequest) (*UnaryCallStringResponse, error)
	UnaryCallInt(context.Context, *UnaryCallIntRequest) (*UnaryCallIntResponse, error)
	ServerStreamString(*ServerStreamStringRequest, TylerSandboxService_ServerStreamStringServer) error
	ServerStreamInt(*ServerStreamIntRequest, TylerSandboxService_ServerStreamIntServer) error
	ClientStreamString(TylerSandboxService_ClientStreamStringServer) error
	ClientStreamInt(TylerSandboxService_ClientStreamIntServer) error
	BidirectionalStreamString(TylerSandboxService_BidirectionalStreamStringServer) error
	mustEmbedUnimplementedTylerSandboxServiceServer()
}

// UnimplementedTylerSandboxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTylerSandboxServiceServer struct {
}

func (UnimplementedTylerSandboxServiceServer) UnaryCallString(context.Context, *UnaryCallStringRequest) (*UnaryCallStringResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCallString not implemented")
}
func (UnimplementedTylerSandboxServiceServer) UnaryCallInt(context.Context, *UnaryCallIntRequest) (*UnaryCallIntResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryCallInt not implemented")
}
func (UnimplementedTylerSandboxServiceServer) ServerStreamString(*ServerStreamStringRequest, TylerSandboxService_ServerStreamStringServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamString not implemented")
}
func (UnimplementedTylerSandboxServiceServer) ServerStreamInt(*ServerStreamIntRequest, TylerSandboxService_ServerStreamIntServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamInt not implemented")
}
func (UnimplementedTylerSandboxServiceServer) ClientStreamString(TylerSandboxService_ClientStreamStringServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamString not implemented")
}
func (UnimplementedTylerSandboxServiceServer) ClientStreamInt(TylerSandboxService_ClientStreamIntServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamInt not implemented")
}
func (UnimplementedTylerSandboxServiceServer) BidirectionalStreamString(TylerSandboxService_BidirectionalStreamStringServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamString not implemented")
}
func (UnimplementedTylerSandboxServiceServer) mustEmbedUnimplementedTylerSandboxServiceServer() {}

// UnsafeTylerSandboxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TylerSandboxServiceServer will
// result in compilation errors.
type UnsafeTylerSandboxServiceServer interface {
	mustEmbedUnimplementedTylerSandboxServiceServer()
}

func RegisterTylerSandboxServiceServer(s grpc.ServiceRegistrar, srv TylerSandboxServiceServer) {
	s.RegisterService(&TylerSandboxService_ServiceDesc, srv)
}

func _TylerSandboxService_UnaryCallString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryCallStringRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TylerSandboxServiceServer).UnaryCallString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TylerSandboxService_UnaryCallString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TylerSandboxServiceServer).UnaryCallString(ctx, req.(*UnaryCallStringRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TylerSandboxService_UnaryCallInt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnaryCallIntRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TylerSandboxServiceServer).UnaryCallInt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TylerSandboxService_UnaryCallInt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TylerSandboxServiceServer).UnaryCallInt(ctx, req.(*UnaryCallIntRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TylerSandboxService_ServerStreamString_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamStringRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TylerSandboxServiceServer).ServerStreamString(m, &tylerSandboxServiceServerStreamStringServer{stream})
}

type TylerSandboxService_ServerStreamStringServer interface {
	Send(*ServerStreamStringResponse) error
	grpc.ServerStream
}

type tylerSandboxServiceServerStreamStringServer struct {
	grpc.ServerStream
}

func (x *tylerSandboxServiceServerStreamStringServer) Send(m *ServerStreamStringResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TylerSandboxService_ServerStreamInt_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServerStreamIntRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TylerSandboxServiceServer).ServerStreamInt(m, &tylerSandboxServiceServerStreamIntServer{stream})
}

type TylerSandboxService_ServerStreamIntServer interface {
	Send(*ServerStreamIntResponse) error
	grpc.ServerStream
}

type tylerSandboxServiceServerStreamIntServer struct {
	grpc.ServerStream
}

func (x *tylerSandboxServiceServerStreamIntServer) Send(m *ServerStreamIntResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TylerSandboxService_ClientStreamString_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TylerSandboxServiceServer).ClientStreamString(&tylerSandboxServiceClientStreamStringServer{stream})
}

type TylerSandboxService_ClientStreamStringServer interface {
	SendAndClose(*ClientStreamStringResponse) error
	Recv() (*ClientStreamStringRequest, error)
	grpc.ServerStream
}

type tylerSandboxServiceClientStreamStringServer struct {
	grpc.ServerStream
}

func (x *tylerSandboxServiceClientStreamStringServer) SendAndClose(m *ClientStreamStringResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tylerSandboxServiceClientStreamStringServer) Recv() (*ClientStreamStringRequest, error) {
	m := new(ClientStreamStringRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TylerSandboxService_ClientStreamInt_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TylerSandboxServiceServer).ClientStreamInt(&tylerSandboxServiceClientStreamIntServer{stream})
}

type TylerSandboxService_ClientStreamIntServer interface {
	SendAndClose(*ClientStreamIntResponse) error
	Recv() (*ClientStreamIntRequest, error)
	grpc.ServerStream
}

type tylerSandboxServiceClientStreamIntServer struct {
	grpc.ServerStream
}

func (x *tylerSandboxServiceClientStreamIntServer) SendAndClose(m *ClientStreamIntResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tylerSandboxServiceClientStreamIntServer) Recv() (*ClientStreamIntRequest, error) {
	m := new(ClientStreamIntRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _TylerSandboxService_BidirectionalStreamString_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TylerSandboxServiceServer).BidirectionalStreamString(&tylerSandboxServiceBidirectionalStreamStringServer{stream})
}

type TylerSandboxService_BidirectionalStreamStringServer interface {
	Send(*BidirectionalStreamStringResponse) error
	Recv() (*BidirectionalStreamStringRequest, error)
	grpc.ServerStream
}

type tylerSandboxServiceBidirectionalStreamStringServer struct {
	grpc.ServerStream
}

func (x *tylerSandboxServiceBidirectionalStreamStringServer) Send(m *BidirectionalStreamStringResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tylerSandboxServiceBidirectionalStreamStringServer) Recv() (*BidirectionalStreamStringRequest, error) {
	m := new(BidirectionalStreamStringRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TylerSandboxService_ServiceDesc is the grpc.ServiceDesc for TylerSandboxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TylerSandboxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tgsbpb.TylerSandboxService",
	HandlerType: (*TylerSandboxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryCallString",
			Handler:    _TylerSandboxService_UnaryCallString_Handler,
		},
		{
			MethodName: "UnaryCallInt",
			Handler:    _TylerSandboxService_UnaryCallInt_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamString",
			Handler:       _TylerSandboxService_ServerStreamString_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ServerStreamInt",
			Handler:       _TylerSandboxService_ServerStreamInt_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamString",
			Handler:       _TylerSandboxService_ClientStreamString_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStreamInt",
			Handler:       _TylerSandboxService_ClientStreamInt_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamString",
			Handler:       _TylerSandboxService_BidirectionalStreamString_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "TylerSandbox.proto",
}
